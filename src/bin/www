#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('demo:server');
const http = require('http');
const config = require('config');
const fs = require('fs');
const logConfig = require('../../config/log');

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(config.get('port') || '3000');
//  app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app.callback());

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * @description: Normalize a port into a number, string, or false.
 * @param {Number} val
 * @return {Boolean} 
 */
function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    //  named pipe
    return val;
  }

  if (port >= 0) {
    //  port number
    return port;
  }

  return false;
}

/**
 * @description: Event listener for HTTP server "error" event.
 * @param {Object} error 
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  //  handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * @description: Event listener for HTTP server "listening" event.
 */
function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

/**
 * @description: 确定目录是否存在，如果不存在则创建目录
 * @param {String} pathStr
 */
function confirmPath(pathStr) {

  if (!fs.existsSync(pathStr)) {
    fs.mkdirSync(pathStr);
    console.log('createPath: ' + pathStr);
  }
}

/**
 * 初始化log相关目录
 */
function initLogPath() {
  // 创建log的根目录'logs'
  if (logConfig.baseLogPath) {
    confirmPath(logConfig.baseLogPath)
    // 根据不同的logType创建不同的文件目录
    for (let i = 0, len = logConfig.appenders.length; i < len; i++) {
      if (logConfig.appenders[i].path) {
        confirmPath(logConfig.baseLogPath + logConfig.appenders[i].path);
      }
    }
  }
}

initLogPath();